Database changed
mysql> describe CUSTOMERS;
+--------+-------------+------+-----+---------+-------+
| Field  | Type        | Null | Key | Default | Extra |
+--------+-------------+------+-----+---------+-------+
| CNO    | varchar(4)  | NO   | PRI | NULL    |       |
| CNAME  | varchar(20) | NO   |     | NULL    |       |
| STREET | varchar(20) | YES  |     | NULL    |       |
| ZIP    | varchar(5)  | YES  | MUL | NULL    |       |
| PHONE  | varchar(12) | YES  |     | NULL    |       |
+--------+-------------+------+-----+---------+-------+
5 rows in set (0.00 sec)

mysql> select * from CUSTOMERS;
+------+---------+------------------+-------+--------------+
| CNO  | CNAME   | STREET           | ZIP   | PHONE        |
+------+---------+------------------+-------+--------------+
| 1111 | Charles | 123 Main St.     | 67226 | 316-636-5555 |
| 2222 | Bertram | 237 Ash Avenue   | 67226 | 316-689-5555 |
| 3333 | Barbara | 111 Inwood St.   | 60606 | 316-111-1234 |
| 4444 | Will    | 111 Kenwood St.  | 54444 | 416-111-1234 |
| 5555 | Bill    | 211 Marlwood St. | 28408 | 416-111-1235 |
| 6666 | Keely   | 211 Pinewood St. | 28411 | 416-111-1235 |
| 7777 | Maera   | 211 Marlwood St. | 28408 | 416-111-1235 |
+------+---------+------------------+-------+--------------+
7 rows in set (0.00 sec)

mysql> describe EMPLOYEES;
+-------+-------------+------+-----+---------+-------+
| Field | Type        | Null | Key | Default | Extra |
+-------+-------------+------+-----+---------+-------+
| ENO   | varchar(4)  | NO   | PRI | NULL    |       |
| ENAME | varchar(20) | NO   |     | NULL    |       |
| ZIP   | varchar(5)  | YES  | MUL | NULL    |       |
| HDATE | date        | YES  |     | NULL    |       |
+-------+-------------+------+-----+---------+-------+
4 rows in set (0.00 sec)

mysql> select * from EMPLOYEES;
+------+--------+-------+------------+
| ENO  | ENAME  | ZIP   | HDATE      |
+------+--------+-------+------------+
| 1000 | Jones  | 67226 | 1995-12-12 |
| 1001 | Smith  | 60606 | 1992-01-01 |
| 1002 | Brown  | 50302 | 1994-09-01 |
| 1003 | Green  | 28411 | 2002-09-01 |
| 1004 | Purple | 28411 | 2003-01-01 |
+------+--------+-------+------------+
5 rows in set (0.00 sec)

mysql> describe ZIPCODES;
+-------+-------------+------+-----+---------+-------+
| Field | Type        | Null | Key | Default | Extra |
+-------+-------------+------+-----+---------+-------+
| ZIP   | varchar(5)  | NO   | PRI | NULL    |       |
| CITY  | varchar(20) | YES  |     | NULL    |       |
+-------+-------------+------+-----+---------+-------+
2 rows in set (0.00 sec)

mysql> select * from ZIPCODES;
+-------+-------------+
| ZIP   | CITY        |
+-------+-------------+
| 28408 | Wilmington  |
| 28411 | Wilmington  |
| 50302 | Kansas City |
| 54444 | Columbia    |
| 60606 | Fort Dodge  |
| 61111 | Fort Hays   |
| 66002 | Liberal     |
| 67226 | Wichita     |
+-------+-------------+
8 rows in set (0.00 sec)

mysql> describe ORDERS;
+----------+------------+------+-----+---------+-------+
| Field    | Type       | Null | Key | Default | Extra |
+----------+------------+------+-----+---------+-------+
| ONO      | varchar(4) | NO   | PRI | NULL    |       |
| CNO      | varchar(4) | YES  | MUL | NULL    |       |
| ENO      | varchar(4) | YES  | MUL | NULL    |       |
| RECEIVED | date       | YES  |     | NULL    |       |
| SHIPPED  | date       | YES  |     | NULL    |       |
+----------+------------+------+-----+---------+-------+
5 rows in set (0.00 sec)

mysql> select * from ORDERS;
+------+------+------+------------+------------+
| ONO  | CNO  | ENO  | RECEIVED   | SHIPPED    |
+------+------+------+------------+------------+
| 1020 | 1111 | 1000 | 1994-12-10 | 1994-12-12 |
| 1021 | 1111 | 1000 | 1995-01-12 | 1995-01-15 |
| 1022 | 2222 | 1001 | 1995-02-13 | 1995-02-20 |
| 1023 | 3333 | 1000 | 2003-02-15 | NULL       |
| 1024 | 4444 | 1000 | 2003-02-15 | 2003-02-16 |
| 1025 | 5555 | 1000 | 2003-02-15 | 2003-02-16 |
+------+------+------+------------+------------+
6 rows in set (0.00 sec)

mysql> describe ODETAILS;
+-------+--------------+------+-----+---------+-------+
| Field | Type         | Null | Key | Default | Extra |
+-------+--------------+------+-----+---------+-------+
| ONO   | varchar(4)   | NO   | PRI | NULL    |       |
| PNO   | varchar(5)   | NO   | PRI | NULL    |       |
| QTY   | decimal(2,0) | YES  |     | NULL    |       |
+-------+--------------+------+-----+---------+-------+
3 rows in set (0.00 sec)

mysql> select * from ODETAILS;
+------+-------+------+
| ONO  | PNO   | QTY  |
+------+-------+------+
| 1020 | 10506 |    1 |
| 1020 | 10508 |    2 |
| 1020 | 10509 |    3 |
| 1020 | 10800 |    1 |
| 1021 | 10506 |    7 |
| 1021 | 10601 |    4 |
| 1022 | 10601 |    1 |
| 1022 | 10701 |    1 |
| 1023 | 10506 |    2 |
| 1023 | 10800 |    1 |
| 1023 | 10900 |    1 |
| 1024 | 10506 |   12 |
| 1025 | 10601 |    2 |
+------+-------+------+
13 rows in set (0.00 sec)

mysql> describe PARTS;
+---------+--------------+------+-----+---------+-------+
| Field   | Type         | Null | Key | Default | Extra |
+---------+--------------+------+-----+---------+-------+
| PNO     | varchar(5)   | NO   | PRI | NULL    |       |
| PNAME   | varchar(20)  | NO   |     | NULL    |       |
| QOH     | decimal(3,0) | YES  |     | NULL    |       |
| PRICE   | decimal(4,2) | YES  |     | NULL    |       |
| R_LEVEL | decimal(2,0) | YES  |     | NULL    |       |
+---------+--------------+------+-----+---------+-------+
5 rows in set (0.00 sec)

mysql> select * from PARTS;
+-------+----------------------+------+-------+---------+
| PNO   | PNAME                | QOH  | PRICE | R_LEVEL |
+-------+----------------------+------+-------+---------+
| 10506 | Land Before Time I   |  200 | 19.99 |      20 |
| 10507 | Land Before Time II  |  156 | 19.99 |      20 |
| 10508 | Land Before Time III |  190 | 19.99 |      20 |
| 10509 | Land Before Time IV  |   60 | 19.99 |      20 |
| 10601 | Sleeping Beauty      |  300 | 24.99 |      20 |
| 10701 | When Harry Met Sally |  120 | 19.99 |      20 |
| 10800 | Dirty Harry          |  140 | 14.99 |      30 |
| 10900 | Dr. Zhivago          |  100 | 24.99 |      30 |
| 10901 | A Star is Born       |  100 |  4.99 |      30 |
| 10902 | Star Wars            |  500 | 24.99 |      30 |
| 10903 | Lord of the Rings    |  100 | 34.99 |      30 |
+-------+----------------------+------+-------+---------+
11 rows in set (0.00 sec)


## 1. Get pno and pname values for parts that are priced less than 20.00 and for which orders have been placed.

mysql> select PNO, PNAME, PRICE
    -> from PARTS natural join ODETAILS
    -> where PARTS.PNO = ODETAILS.PNO
    -> and PRICE < 20;
+-------+----------------------+-------+
| PNO   | PNAME                | PRICE |
+-------+----------------------+-------+
| 10506 | Land Before Time I   | 19.99 |
| 10506 | Land Before Time I   | 19.99 |
| 10506 | Land Before Time I   | 19.99 |
| 10506 | Land Before Time I   | 19.99 |
| 10508 | Land Before Time III | 19.99 |
| 10509 | Land Before Time IV  | 19.99 |
| 10701 | When Harry Met Sally | 19.99 |
| 10800 | Dirty Harry          | 14.99 |
| 10800 | Dirty Harry          | 14.99 |
+-------+----------------------+-------+
9 rows in set (0.00 sec)


## 2. Get all details (all CUSTOMER attributes) of customers whose names have the letter e as the second and third letters.

mysql> select * from CUSTOMERS
    -> where substr(CNAME, 2, 2) = "ee";
+------+-------+------------------+-------+--------------+
| CNO  | CNAME | STREET           | ZIP   | PHONE        |
+------+-------+------------------+-------+--------------+
| 6666 | Keely | 211 Pinewood St. | 28411 | 416-111-1235 |
+------+-------+------------------+-------+--------------+
1 row in set (0.00 sec)


## 3. Get cname and ename pairs such that the customer with name cname has placed an order through employee with name ename.

mysql> select CNAME, ENAME
    -> from CUSTOMERS cross join ORDERS cross join EMPLOYEES
    -> where CUSTOMERS.CNO = ORDERS.CNO
    -> and EMPLOYEES.ENO = ORDERS.ENO
    -> group by CNAME, ENAME;
+---------+-------+
| CNAME   | ENAME |
+---------+-------+
| Barbara | Jones |
| Bertram | Smith |
| Bill    | Jones |
| Charles | Jones |
| Will    | Jones |
+---------+-------+
5 rows in set (0.00 sec)


## 4. For each odetail row get ono, pno, pname, qty, and price values along with the total price for this item.

mysql> select ONO, PNO, PNAME, QTY, PRICE, (QTY*PRICE) as TOTAL
    -> from ODETAILS natural join PARTS;
+------+-------+----------------------+------+-------+--------+
| ONO  | PNO   | PNAME                | QTY  | PRICE | TOTAL  |
+------+-------+----------------------+------+-------+--------+
| 1020 | 10506 | Land Before Time I   |    1 | 19.99 |  19.99 |
| 1020 | 10508 | Land Before Time III |    2 | 19.99 |  39.98 |
| 1020 | 10509 | Land Before Time IV  |    3 | 19.99 |  59.97 |
| 1020 | 10800 | Dirty Harry          |    1 | 14.99 |  14.99 |
| 1021 | 10506 | Land Before Time I   |    7 | 19.99 | 139.93 |
| 1021 | 10601 | Sleeping Beauty      |    4 | 24.99 |  99.96 |
| 1022 | 10601 | Sleeping Beauty      |    1 | 24.99 |  24.99 |
| 1022 | 10701 | When Harry Met Sally |    1 | 19.99 |  19.99 |
| 1023 | 10506 | Land Before Time I   |    2 | 19.99 |  39.98 |
| 1023 | 10800 | Dirty Harry          |    1 | 14.99 |  14.99 |
| 1023 | 10900 | Dr. Zhivago          |    1 | 24.99 |  24.99 |
| 1024 | 10506 | Land Before Time I   |   12 | 19.99 | 239.88 |
| 1025 | 10601 | Sleeping Beauty      |    2 | 24.99 |  49.98 |
+------+-------+----------------------+------+-------+--------+
13 rows in set (0.00 sec)


## 5. Get all pairs of cno values such that both customers in a pair live in the same zip code.

mysql> select c.CNO as CNO, m.CNO as CNO
    -> from CUSTOMERS c inner join CUSTOMERS m on c.zip = m.zip
    -> where c.CNO != m.CNO
    -> order by c.CNO;
+------+------+
| CNO  | CNO  |
+------+------+
| 1111 | 2222 |
| 2222 | 1111 |
| 5555 | 7777 |
| 7777 | 5555 |
+------+------+
4 rows in set (0.00 sec)


## 6. Get pno and # of orders for parts that have been included in at least two different orders.

mysql> select PNO, count(*) as NUMBER
    -> from PARTS natural join ODETAILS
    -> group by PNO
    -> having count(*) > 1 ;
+-------+--------+
| PNO   | NUMBER |
+-------+--------+
| 10506 |      4 |
| 10601 |      3 |
| 10800 |      2 |
+-------+--------+
3 rows in set (0.00 sec)


## 7. Get the cno and cname values for customers who have placed an order for Dirty Harry or Dr. Zhivago.

mysql> select CNO, CNAME
    -> from ORDERS natural join ODETAILS natural join PARTS natural join CUSTOMERS
    -> where PNAME = "Dirty Harry" or PNAME = "Dr. Zhivago"
    -> group by CNO, CNAME;
+------+---------+
| CNO  | CNAME   |
+------+---------+
| 1111 | Charles |
| 3333 | Barbara |
+------+---------+
2 rows in set (0.00 sec)


## 8. Get cname values for customers who have placed at least one order with employee with eno = 1000.

mysql> select CNAME
    -> from CUSTOMERS cross join ORDERS cross join EMPLOYEES
    -> where CUSTOMERS.CNO = ORDERS.CNO
    -> and EMPLOYEES.ENO = ORDERS.ENO
    -> and EMPLOYEES.ENO = "1000"
    -> group by CNAME;
+---------+
| CNAME   |
+---------+
| Barbara |
| Bill    |
| Charles |
| Will    |
+---------+
4 rows in set (0.00 sec)


## 9. Get the total quantity of part 10601 that have been ordered. The result for this query will be a table with one row and one column showing the total quantity of part 10601 sold.

mysql> select sum(QTY) as TOTAL
    -> from ODETAILS 
    -> where PNO = "10601"
    -> group by PNO;
+-------+
| TOTAL |
+-------+
|     7 |
+-------+
1 row in set (0.00 sec)


## 10. For each order, get the total value in dollars for that order.

mysql> select ONO, sum(QTY*PRICE) as TOTAL
    -> from ODETAILS natural join ORDERS natural join PARTS
    -> group by ONO;
+------+--------+
| ONO  | TOTAL  |
+------+--------+
| 1020 | 134.93 |
| 1021 | 239.89 |
| 1022 |  44.98 |
| 1023 |  79.96 |
| 1024 | 239.88 |
| 1025 |  49.98 |
+------+--------+
6 rows in set (0.00 sec)


## 11. List each city and the number of customers living in that city.

mysql> select CITY, count(*) as NUMBER
    -> from CUSTOMERS natural join ZIPCODES
    -> group by CITY;
+------------+--------+
| CITY       | NUMBER |
+------------+--------+
| Columbia   |      1 |
| Fort Dodge |      1 |
| Wichita    |      2 |
| Wilmington |      3 |
+------------+--------+
4 rows in set (0.00 sec)


## 12. List the pno and pname of parts that cost more than the average cost of all parts.

mysql> select PNO, PNAME, PRICE
    -> from PARTS
    -> where PRICE > (select avg(PRICE) from PARTS);
+-------+-------------------+-------+
| PNO   | PNAME             | PRICE |
+-------+-------------------+-------+
| 10601 | Sleeping Beauty   | 24.99 |
| 10900 | Dr. Zhivago       | 24.99 |
| 10902 | Star Wars         | 24.99 |
| 10903 | Lord of the Rings | 34.99 |
+-------+-------------------+-------+
4 rows in set (0.00 sec)


## 13. For each part that has been sold, get pno and pname values along with total sales in dollars for that part.

mysql> select PNO, PNAME, sum(QTY*PRICE) as SALES
    -> from PARTS natural join ODETAILS
    -> group by PNO;
+-------+----------------------+--------+
| PNO   | PNAME                | SALES  |
+-------+----------------------+--------+
| 10506 | Land Before Time I   | 439.78 |
| 10508 | Land Before Time III |  39.98 |
| 10509 | Land Before Time IV  |  59.97 |
| 10601 | Sleeping Beauty      | 174.93 |
| 10701 | When Harry Met Sally |  19.99 |
| 10800 | Dirty Harry          |  29.98 |
| 10900 | Dr. Zhivago          |  24.99 |
+-------+----------------------+--------+
7 rows in set (0.00 sec)


## 14. For each part get pno and pname values along with total sales in dollars for that part, but only when the total sales amount exceeds $100.

mysql> select PNO, PNAME, sum(QTY*PRICE) as SALES
    -> from PARTS natural join ODETAILS
    -> group by PNO
    -> having sum(QTY*PRICE) > 100;
+-------+--------------------+--------+
| PNO   | PNAME              | SALES  |
+-------+--------------------+--------+
| 10506 | Land Before Time I | 439.78 |
| 10601 | Sleeping Beauty    | 174.93 |
+-------+--------------------+--------+
2 rows in set (0.00 sec)


## 15. Get ono values for orders that were shipped within two days of the receipt of the order.

mysql> select ONO
    -> from ORDERS 
    -> where (select datediff(SHIPPED,RECEIVED)) < 3;
+------+
| ONO  |
+------+
| 1020 |
| 1024 |
| 1025 |
+------+
3 rows in set (0.00 sec)

mysql> notee;
